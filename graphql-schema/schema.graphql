"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    users: [User!]! @paginate(type: "paginator" model: "App\\Models\\User")
    user(id: ID @eq): User @find(model: "App\\Models\\User")
    centers: [Center!]! @paginate(type: "paginator" model: "App\\Models\\Center")
    center(id: ID @eq): Center @find(model: "App\\Models\\Center")
    cities: [City!]! @all
    city(id: ID @eq): City @find(model: "App\\Models\\City")
    batch(id: ID @eq): Batch @find(model: "App\\Models\\Batch")
    level(id: ID @eq): Level @find(model: "App\\Models\\Level")
    eventsInCity(city_id: ID): [Event] #Custom - app/GraphQL/Queries/EventsInCity.php
    event(id: ID @eq): Event @find(model: "App\\Models\\Event")
    class(id: ID @eq): Class @find(model: "App\\Models\\Classes")
    classSearch(teacher_id: ID, status: String): [Class] #Custom - app/GraphQL/Queries/ClassSearch.php
}

type User {
	id: ID!
	name: String!
	email: String
	phone: String
	mad_email: String
	credit: Int
	city_id: Int
	city: String
	joined_on: String
	left_on: String
	reason_for_leaving: String
	user_type: String
	address: String
	birthday: String
	photo: String
	sex: String
	status: String
	groups: [Group]
	data: [Data]
	city: City @belongsTo
	classes: [Class] @hasMany(relation: "classes") # :TODO: - Ideally, this should take an argument - (status: String)
	batches: [Batch] @hasMany
	pivot: UserPivot
}
type UserPivot {
	# UserClass data - teacher attendance
	status: String
	substitute_id: Int
	zero_hour_attendance: Int

	# UserEvent data - event attendance
	present: Int
	late: Int
	user_choice: Int
	reason: String
}

type Student {
	id: ID!
	name: String!
	description: String
	birthday: String
	added_on: String
	center_id: Int
	sex: String
	center: Center @belongsTo
	pivot: StudentAttendance
}

type StudentAttendance {
	present: String
	participation: Int
	check_for_understanding: Int
}

type Center {
	id: ID!
	name: String!
	teachers: [User]
	students: [Student]
	batches: [Batch]
	levels: [Level]
	city: City @belongsTo
}

type City {
	id: ID!
	name: String!
	president_id: Int
	type: String
	users: [User]
	centers: [Center]
}

type Group {
	id: ID!
	name: String!
	vertical_id: Int
	vertical: Vertical
}

type Vertical {
	id: ID!
	name: String!
}

type Batch {
	id: ID!
	name: String @method(name: "name")
	day: String
	class_time: String
	center: Center @belongsTo
	levels: [Level]
}

type Level {
	id: ID!
	level_name: String @method(name: "name")
	name: String!
	grade: String!
	center: Center @belongsTo
	batches: [Batch]
	students: [Student]
}

type Class {
	id: ID!
	class_on: DateTime
	class_type: String
	class_satisfaction: Int 
	cancel_option: String
	cancel_reason: String
	status: String
	level: Level @belongsTo
	batch: Batch @belongsTo
	students: [Student]
	teachers: [User]
	substitutes: [User]
}

type Event {
	id: ID!
	name: String!
	description: String
	place: String
	type: String
	city_id: ID
	starts_on: DateTime
	event_type_id: ID
	status: String
	event_type: String @method(name: "eventType")
	city: City
	invitees: [User]
	attendees: [User]
}

type Event_Type {
	id: ID!
	name: String!
}

type Data {
	name: String!
	data: String!
	item: String
	item_id: Int
	year: Int
}

