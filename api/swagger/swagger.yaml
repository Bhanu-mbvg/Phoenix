swagger: "2.0"
info:
  version: "1.0"
  title: "MADApp API"
  description: "API endpoint documentation for MADApp. Responses will be follow JSend conventions - http://labs.omniti.com/labs/jsend."
host: makeadiff.in
basePath: /api/v1/
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  basicAuth:
    type: basic
security:
  - basicAuth: []
  
# To create docs, use this command
# bootprint openapi <swagger.yaml> <output_folder>
#     bootprint should be installed for this to work - use 'sudo npm install -g spectacle-docs' to install bootprint.
# OR 
# spectacle -d <swagger.yaml>
#     spectacle should be installed for this to work - use 'sudo npm install -g spectacle-docs' to install spectacle.

paths:
  ############################### User
  /users:
    get:
      tags:
        - user
      summary: User Search
      description: Search interface for users. Use any of the given parameters to search/filter the user table. The final result will be returned.
      parameters:
        - name: name
          in: query
          type: string
          description: Search by user name
        - name: phone
          in: query
          type: string
          description: Search by phone number
        - name: email
          in: query
          type: string
          description: Search users by given email
        - name: mad_email
          in: query
          type: string
          description: Search users by just the mad email
        - name: group_id
          in: query
          type: integer
          description: Return all users of the given group
        - name: group_in
          in: query
          type: string
          description: Returns all users in any of the given group. Can give an array - eg. group_in=3,5,9
        - name: city_id
          in: query
          type: integer
          required: false
          description: Return all users in the given city. If ommited the city of the user who's login is used to access the api is assumed.
        - name: user_type
          in: query
          type: string
          enum:
            - volunteer
            - applicant
            - let_go
            - alumnai
          description: Can be 'volunteer', 'applicant', 'let_go' or 'alumnai'. 
        - name: center_id
          in: query
          type: integer
          required: false
          description: Returns all the teachers in the given city.
      responses:
        '200':
          description: Returns the list of users according to the given parameters.
          schema:
            type: "array"
            items: 
              $ref: "#/definitions/User"
    post:
      tags:
        - user
      summary: Create new User
      description: Use this call to create new user. 
      parameters:
        - name: name
          in: formData
          type: string
          required: true
          description: Name of the user
          # example: Bruce Wayne
        - name: phone
          in: formData
          type: string
          required: true
          description: Phone number
          # example: "911911911"
        - name: email
          in: formData
          type: string
          required: true
          description: Email
          # example: "bruce@wayne-enterprises.com"
        - name: mad_email
          type: string
          in: formData
          description: "MAD Email - if they are a fellow or above, they'll have this."
        - name: password
          type: string
          in: formData
          description: "Password for the user. If registering on site, set this to 'pass'"
          # example: "iambatman"
        - name: joined_on
          type: string
          format: "date-time"
          in: formData
          description: The date they joined 
          # example: "2009-05-09"
        - name: city_id
          type: integer
          in: formData
          required: true
          description: ID of the city that user belongs to. Must be a valid city.
          # example: 1
        - name: user_type
          in: formData
          type: string
          enum:
            - volunteer
            - applicant
            - let_go
            - alumnai
          description: Can be 'volunteer', 'applicant', 'let_go' or 'alumnai'. 
          # example: volunteer
      responses:
        200:
          description: User added successfully.
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.
          
  /users/{user_id}:
    get:
      tags:
        - user
      summary: User Information
      description: Use this to get information of any user in the system. Keep in mind that this will not return details of deleted users. 
      parameters:
        - name: user_id
          in: path
          description: The ID of the user to be found.
          required: true
          type: integer
      responses:
        200:
          description: Returns the user details
          schema:
            type: "object"
            items:
              $ref: "#/definitions/User"
        404:
          description: Can't find user with given ID
    post:
      tags:
        - user
      summary: Edit User
      description: Update the user with the given ID - set any of the fields in the parameter list.
      parameters:
        # Another option of doing this.
        # - name: user
        #   in: body
        #   description: User details to update
        #   schema:
        #       $ref: "#/definitions/User"
        - name: user_id
          in: path
          type: integer
          description: The ID of the user who has to be edited
          required: true
        - name: name
          in: formData
          type: string
          description: If you want to edit the name of the volunteer, provide the new name here.
        - name: email
          in: formData
          type: string
          description: If you want to change the email id associated with this account, use this field
        - name: phone
          in: formData
          type: string
          description: Phone number of the user.
        - name: mad_email
          in: formData
          type: string
          description: makeadiff.in email id. All users who are fellow or up will have this.
        - name: joined_on
          in: formData
          type: string
          format: "date-time"
          description: The date the user joined MAD
        - name: left_on
          in: formData
          type: string
          format: "date"
          description: The date user left MAD. Don't include this field if the user is still a volunteer
        - name: user_type
          in: formData
          type: string
          description: Can be any of these "volunteer", "let_go", "alumnai", "applicant"
        - name: address
          in: formData
          type: string
          description: Address of the user
        - name: sex
          in: formData
          type: string
          description: Sex of the user - can be "m", "f" or "o"
      responses:
        200:
          description: User edited with given data
        404:
          description: Can't find any user with the given {user_id}
          
    delete:
      tags:
        - user
        - delete
      summary: Delete User
      description: Sets the status of the given user to '0' - makes this user un-accessable.
      parameters:
        - name: user_id
          in: path
          type: integer
          description: The id of the user to be deleted.
          required: true
      responses:
        200:
          description: User was deleted
        404:
          description: Couldn't find the user with the given {user_id}

  /users/{user_id}/groups:
    get:
      tags:
        - user 
        - group
      summary: User Groups of an user
      description: Return all the groups of the given user ID.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
      responses:
        200: 
          description: Ok
        404:
          description: Can't find any user with the given ID.

  /users/{user_id}/groups/{group_id}:
    post:
      tags:
        - user
        - group
      summary: Add User to group.
      description: Add the user to the given User Group.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
        - name: group_id
          type: integer
          in: path
          required: true
          description: ID of the Group
      responses:
        200:
          description: Ok
        404:
          description: Can't find any user or group with the given ID. 
    delete:
      tags:
        - user
        - group
      summary: Remove User from Group
      description: Unset the user group connection for the given user and group.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
        - name: group_id
          type: integer
          in: path
          required: true
          description: ID of the Group
      responses:
        200:
          description: Ok
        404:
          description: Can't find user or the group.

  /users/{user_id}/donations:
    get:
      tags:
        - user 
        - donation
        - donut
      summary: Donations raised by User
      description: Returns all the donations that the given user has raised.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
      responses:
        200:
          description: Returns the donations of the given user
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Donation"
        404:
          description: Can't find any user with the id {user_id}

  /users/{user_id}/credit:
    get:
      tags:
        - user 
        - credit
      summary: Credit of User
      description: Returns the credit of the user with given ID
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
      responses:
        200:
          description: Returns the credit of the user
        404:
          description: Can't find any user with the id {user_id}
          
    post:
      tags:
        - user 
        - credit
      summary: Edit the credit of User
      description: Edit the credit of the user - make sure you provide a rational along with the new credit.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
        - name: credit
          type: number
          in: formData
          required: true
          description: New credit of the user
        - name: updated_by_user_id
          type: integer
          in: formData
          required: true
          description: ID of the user updating the credit
        - name: reason
          type: string
          in: formData
          required: true
          description: Reason for the credit update.
      responses:
        200:
          description: Credit edited.
        404:
          description: Can't find user with the id {user_id}
        400:
          description: Invalid data - required fields missing or in wrong format.
          
  /users/{user_id}/credit_history:
    get:
      tags:
        - user 
        - credit
      summary: Credit history of given user.
      description: Returns the entire history of credit changes for the given user.
      parameters:
        - name: user_id
          in: path
          description: ID of the user who's history we want
          required: true
          type: integer
      responses:
        200: 
          description: Ok
        404:
          description: No user fonud with that User ID.
 
  /users/{user_id}/class_history:
    get:
      tags:
        - user
      summary: Class history of user.
      description: Returns the entire class history of the given user.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user who's history we want
          type: integer
      responses:
        200: 
          description: Ok

  /users/login:
    get:
      tags:
        - user
        - auth
      summary: User Authentication
      description: Logs user into the system
      parameters:
        - name: email
          in: query
          description: The email id for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: User Logged into the system.
        '400':
          description: Invalid username/password supplied
  #/users/logout:
  #  get:
  #    tags:
  #      - user
  #      - auth
  #    description: Logs out current logged in user session
  #    parameters: []
  #    responses:
  #      default:
  #        description: User logged out.
  
  ########################################### Cities
  /cities:
    get:
      tags:
        - city
      summary: Returns all cities
      description: Gets list of all the cities in the system.
      parameters: []
      responses:
        200:
          description: Returns list of cities where MAD is operational in
          schema:
            type: "array"
            items:
              $ref: "#/definitions/City"
  
  /cities/{city_id}:
    get:
      tags:
        - city
      summary: City Information
      description: Returns the details of the city who's ID is given.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city to fetch
      responses:
        200:
          description: OK
          
  /cities/{city_id}/users:
    get:
      tags:
        - user
        - city
      summary: Users in City
      description: Return all active users in the city with the given ID.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city
      responses:
        200:
          description: Returns the list of users
        404:
          description: Can't find any city with the given city ID
          
  /cities/{city_id}/teachers:
    get:
      tags:
        - user 
        - city
        - teacher
      summary: Teachers in a city
      description: Return all the teachers in the given city
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city
      responses:
        200:
          description: Returns the list of teachers
        404:
          description: Can't find any city with the given city ID

  /cities/{city_id}/fellows:
    get:
      tags:
        - user 
        - city
        - fellow
      summary: Fellows in a city
      description: Return all the fellows in the given city. This includes the City Team Leads and Shelter Ops Fellows as well.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city
      responses:
        200:
          description: Returns the list of fellows
        404:
          description: Can't find any city with the given city ID
          
  /cities/{city_id}/centers:
    get:
      tags:
        - city
        - center
      summary: Centers in a city.
      description: Returns the list of all centers in the given city.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: City ID
      responses:
        200:
          description: Returns all centers.
        404:
          description: Can't find city with given ID.

  /cities/{city_id}/students:
    get:
      tags:
        - city
        - student
      summary: Students in a city.
      description: Returns the list of all students in the given city.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: City ID
      responses:
        200:
          description: Returns all students.
        404:
          description: Can't find city with given ID.

  ###################################### Group
  # :TODO: - this is now a search operation. Search for 'id', 'name','type','vertical_id'.
  /groups:
    get:
      tags:
        - group
      summary: All Groups.
      description: Returns all the groups currently active.
      responses:
        200:
          description: Ok

  /groups/{group_id}:
    get:
      tags:
        - group
        - single
      summary: Information about a User Group
      description: Returns the details of the group of the given ID
      parameters:
        - name: group_id
          in: path
          required: true
          type: integer
          description: Group ID
      responses:
        200:
          description: Ok
        404:
          description: Group not found.
  
  ###################################### Center
  /centers:
    get:
      tags:
        - center
      summary: Search Centers.
      description: Returns a list of all centers matching given parameters
      parameters:
        - name: name
          in: query
          type: string
          description: Search by Center name
        - name: city_id
          in: query
          type: integer
          required: false
          description: Return all centers in the given city.
      responses:
        200:
          description: Ok
    # post:
    #   description: Create a new center.
    #   parameters:
    #     - name: name
    #       in: query
    #       type: string
    #       required: true
    #       description: Search by Center name
    #     - name: city_id
    #       in: query
    #       type: integer
    #       required: true
    #       description: Return all centers in the given city.
    #     - center_head_id
    #       in: query
    #       type: integer
    #       required: true
    #       description: The Shelter Operations Fellow's user ID. 
    #   responses:
    #     200:
    #       description: Ok

  /centers/{center_id}:
    get:
      tags:
        - center
        - single
      summary: Information about a center.
      description: Returns the details of the center who's ID is given
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID
    # post:
    #   description: Edit the given center.
    #   parameters:
    #     - name: name
    #       in: query
    #       type: string
    #       required: true
    #       description: Search by Center name
    #     - name: city_id
    #       in: query
    #       type: integer
    #       required: true
    #       description: Return all centers in the given city.
    #     - center_head_id
    #       in: query
    #       type: integer
    #       required: true
    #       description: The Shelter Operations Fellow's user ID. 
    #   responses:
    #     200:
    #       description: Ok
    #     404:
    #        description: Can't find any centers with the given ID
    # delete:
    #   description: Deletes the given center.
    #   responses:
    #     200:
    #       description: Ok
    #     404:
    #        description: Can't find any centers with the given ID
  
  /centers/{center_id}/teachers:
    get:
      tags:
        - user
        - teacher
        - center
      summary: Teachers in given center.
      description: Returns the teachers assigned to the given center.
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID

  /centers/{center_id}/students:
    get:
      tags:
        - student
        - center
      summary: Students in given center.
      description: Returns the students in the given center.
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID

  /centers/{center_id}/levels:
    get:
      tags:
        - level 
        - center
      summary: Levels in given center.
      description: Returns the levels/class sections. in the given center.
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID

  /centers/{center_id}/batches:
    get:
      tags:
        - batch
        - center
      summary: Batches in given center.
      description: Returns the batches in the given center.
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID

  ###################################### Students
  
  /students:
    get:
      tags:
        - student
        - search
      summary: Student search.
      description: Returns a list of all students matching given parameters
      parameters:
        - name: name
          in: query
          type: string
          description: Search by name
        - name: city_id
          in: query
          type: integer
          required: false
          description: Return all students in the given city. If ommited the city of the user who's login is used to access the api is assumed.
        - name: center_id
          in: query
          type: integer
          required: false
          description: Returns all the students in the given center.
        - name: sex
          in: query
          type: string
          enum: [m,f]
          required: false
          description: Returns all the students who are of the given gender. Can be 'm' or 'f'.
      responses:
        '200':
          description: Returns the list of students according to the given parameters.
          schema:
            type: "array"
            items: 
              $ref: "#/definitions/Student"
        '404':
          description: Did not find any students matching the given parameters
    post:
      tags:
        - student
      summary: Create new student
      description: Create a new student with the data given in the body.
      parameters:
        - name: name
          in: formData
          type: string
          required: true
          description: Name of the Student
        - name: sex
          in: formData
          type: string
          enum: [m,f]
          description: Sex of the student - 'm' or 'f'.
        - name: center_id
          type: integer
          in: formData
          required: true
          description: ID of the Center that student belongs to. Must be a valid center.
      responses:
        200:
          description: Student added successfully.
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

  /students/{student_id}:
    get:
      tags:
        - student
      summary: Student Information
      description: Returns the student who's ID is given
      parameters:
        - name: student_id
          in: path
          description: The ID of the student to be found.
          required: true
          type: integer
      responses:
        200:
          description: Returns the student details
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Student"
        404:
          description: Can't find student with given ID
        400:
          description: Invalid ID format - did you put alphabets into the ID?
    post:
      tags:
        - student
      summary: Edit student
      description: Edit details of the given student
      parameters:
        - name: student_id
          in: path
          type: integer
          description: The ID of the student who has to be edited
          required: true
        - name: name
          in: formData
          type: string
          description: If you want to edit the name of the volunteer, provide the new name here.
        - name: sex
          in: formData
          type: string
          description: Sex of the student - can be "m", "f" or "u"
      responses:
        200:
          description: User edited with given data
        404:
          description: Can't find any student with the given {student_id}
          
    delete:
      tags:
        - student
      summary: Delete Student
      description: Deletes the student with the given ID 
      parameters:
        - name: student_id
          in: path
          type: integer
          description: The id of the student to be deleted.
          required: true
      responses:
        200:
          description: Student was deleted
        404:
          description: Couldn't find the student with the given {student_id}

  ############################# Level
  /levels/{level_id}:
    get:
      tags:
        - level
      summary: Level information
      description: Returns the details of the level with the given ID
      parameters:
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level that should be found.
      responses:
        200:
          description: Details of the level will be returned.
        404:
          description: Can't find any level with the given {level_id}

  /levels/{level_id}/students:
    get:
      tags:
        - student
        - level
      summary: Students in Level
      description: Returns the students mapped to the given level.
      parameters:
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level
      responses:
        200:
          description: List of all the students in that level.
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Student"
        404:
          description: Can't find any level with the given {level_id}

  /levels/{level_id}/batches:
    get:
      tags:
        - batch
        - level
      summary: Batches in level
      description: Returns the batches mapped to the given level.
      parameters:
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level
      responses:
        200:
          description: List of all the batches in the given level.
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Batch"
        404:
          description: Can't find any level with the given {level_id}


  ######################## Batches
  /batches/{batch_id}:
    get:
      tags:
        - batch
      summary: Batch information
      description: Returns the details of the batch with the given ID
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch that should be found.
      responses:
        200:
          description: Details of the batch will be returned.
        404:
          description: Can't find any batch with the given {batch_id}

  /batches/{batch_id}/teachers:
    get:
      tags:
        - batch
        - teacher
        - user
      summary: Teachers in batch
      description: Returns the teachers mapped to the given batch.
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch
      responses:
        200:
          description: List of all the teachers in that batch.
          schema:
            type: "object"
            items:
              $ref: "#/definitions/User"
        404:
          description: Can't find any batch with the given {batch_id}

  /batches/{batch_id}/levels:
    get:
      tags:
        - batch
        - level
      summary: Levels in batch
      description: Returns the levels mapped to the given batch.
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch
      responses:
        200:
          description: List of all the levels in that batch.
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Level"
        404:
          description: Can't find any batch with the given {batch_id}

  ############################ Donations
  /donations:
    get:
      tags:
        - donation 
        - donut 
      summary: Search Donations
      description: Search thru donations of the current year using any of the listed parameters.
      parameters:
        - name: id
          in: query
          type: integer
          description: Find donation with the given ID.
        - name: city_id
          in: query
          type: integer
          description: Find donations in the given city.
        - name: amount
          in: query
          type: integer
          description: Find donations that is for the given amount
        - name: status
          in: query
          type: string
          enum:
            - deposited
            - collected
            - receipted
          description: Find donations that have this donation status.
        - name: fundraiser_user_id
          in: query
          type: integer
          description: Find donations raised by the given user
        - name: type
          in: query
          type: string
          enum:
            - cash
            - cheque
            - nach
            - globalgiving
            - giveindia
            - online
            - other
          description: Donation type
        - name: updated_by_user_id
          in: query
          type: integer
          description: Find donations edited by the given user.
        - name: include_deposit_info
          in: query
          type: string
          enum:
            - true
            - false
          description: Include the deposit information along with the donation data.
        - name: deposited
          in: query
          type: string
          enum:
            - true
            - false
          description: Return only deposited donations.
        - name: deposit_status_in
          in: query
          type: string
          description: Comma seperated list of possible deposit statuses. 
        - name: deposit_status
          in: query
          type: string
          enum:
            - pending
            - approved
            - rejected
          description: Find donations that are in this stage of deposit.
        - name: approver_user_id
          in: query
          type: integer
          description: Find all donations approved by given user id.
      responses:
        '200':
          description: Returns the list of donations that matches the given parameters.
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Donation"
    post:
      tags:
        - donation
        - donut 
      summary: Add Donation
      description: Add a new donation based on the data provided
      parameters:
        - name: donor_name
          in: formData
          type: string
          description: Name of the donor making the donation
          required: true
        - name: donor_email
          in: formData
          type: string
          description: Donor Email Address 
          required: true
        - name: donor_phone
          in: formData
          type: string
          description: Donor Phone number
          required: true
        - name: donor_address
          in: formData
          type: string
          description: Donor's home address.
        - name: type
          in: formData
          required: true
          type: string
          enum:
            - cash
            - cheque
            - nach
            - globalgiving
            - giveindia
            - online
            - other
          description: ID of the user who added this donation.
        - name: fundraiser_user_id
          in: formData
          type: integer
          description: ID of the user who added this donation.
        - name: amount
          in: formData
          type: integer
          description: Amount donated
        - name: added_on
          in: formData
          type: string
          description: Time the donation was made
          format: "date-time"
        - name: comment
          in: formData
          type: string
          description: Any comments about this donation. For eg. "Donation for Dream Camp"
      responses:
        200:
          description: Donation added successfully
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.
  /donations/{donation_id}:
    get:
      tags:
        - donation
        - donut
      summary: Donation Information
      description: Use this to get data on any given donation.
      parameters:
        - name: donation_id
          in: path
          description: The ID of the donation to be found.
          required: true
          type: integer
      responses:
        200:
          description: Returns the donation details
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Donation"
        404:
          description: Can't find donation with given ID
    delete:
      tags:
        - donation
        - donut
      summary: Delete a Donation
      description: Deletes the donation with the given ID. 
      parameters:
        - name: donation_id
          in: path
          description: The ID of the donation to be found.
          required: true
          type: integer
      responses:
        200:
          description: Ok
        404:
          description: Can't find donation with given ID

  /deposits:
    get:
      tags:
        - deposit 
        - donut
      summary: Deposit Search
      description: Search thru the deposits to get items the current user should review, review status, etc.
      parameters:
        - name: id
          in: query
          type: integer
          description: ID of the deposit that should be shown.
        - name: status
          in: query
          type: string
          enum:
            - approved
            - rejected
            - pending
          description: Search for all deposits that has the given status.
        - name: status_in
          in: query
          type: string
          description: Search for all deposits that matches any of the given status. 
        - name: reviewer_id
          in: query
          type: integer
          description: Returns all the deposits that the given user has to review.
      responses:
        200:
          description: Ok 
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Deposit"
    post:
      tags:
        - deposit
        - donut
      summary: Add Deposit 
      description: Add new deposit with the given information.
      parameters:
        - name: collected_from_user_id
          in: query
          type: integer
          description: The ID of the user from whom the money should be collected from.
          required: true
        - name: given_to_user_id
          in: query
          type: integer
          description: The ID of the user to whom the money should be given to
          required: true
        - name: donation_ids
          in: query
          type: array
          items:
            type: integer
          description: An array of all the IDs of the donations included in this deposit. 
          required: true
      responses:
        200:
          description: Created the deposit.
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Deposit"
        400:
          description: Errors in input.
  /deposits/{deposit_id}:
    post:
      tags:
        - deposit
        - donut
      summary: Approve/Reject Deposit
      description: Use this call to approve/reject any given deposit.
      parameters:
        - name: deposit_id
          in: path
          type: integer
          description: ID of the deposit to be edited.
          required: true
        - name: reviewer_id
          in: query
          type: integer
          description: ID of the user who is going to review the deposit.
          required: true
        - name: status
          in: query
          type: string
          enum:
            - approved
            - rejected
            - pending
          description: The deposit will be approved/rejected based on this.
          required: true
      responses:
        200:
          description: Updated the deposit
        400:
          description: Errors in input.

  /events:
    get:
      tags:
        - event
      summary: Search for events
      description: Search thru all created events. Use any of the given parameters to narrow down the list of events.
      parameters:
        - name: name
          in: query
          type: string
          description: Search for the events with the given name 
        - name: description
          in: query
          type: string
          description: Search for the given text within the event description
        - name: date
          in: query
          type: string
          format: "date-time"
          description: Search for event by the date when the event starts
        - name: latitude
          in: query
          type: string
          description: Search for the event by the location(latitude) of the event
        - name: longitude
          in: query
          type: string
          description: Search for the event by the location(longitude) of the event
        - name: place
          in: query
          type: string
          description: Search by the place were event is happening.
        - name: city_id
          in: query
          type: integer
          description: City of the event
        - name: type
          in: query
          type: string
          description: Search by event type.
        - name: created_by_user_id
          in: query
          type: integer
          description: Search by the user who created the event.
      responses:
        200:
          description: Returns a list of all event matching the given parameters
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

    post:
      tags:
        - event
      summary: Create a new event
      description: Create a new event using the given parameters
      parameters:
        - name: name
          in: formData
          type: string
          required: true
          description: Name of the event
        - name: description
          in: formData
          type: string
          description: Description of the event
        - name: starts_on
          in: formData
          type: string
          format: "date-time"
          required: true
          description: The date when the event will happen
        - name: place
          in: formData
          type: string
          description: The place where the event will happen
        - name: city_id
          in: formData
          required: true
          type: integer
          description: The ID of the city where the city is happening.
        - name: event_type_id
          in: formData
          required: true
          type: integer
          description: The ID of the event type.
        - name: created_by_user_id
          in: formData
          type: integer
          required: true
          description: ID of the user who created the event 
        - name: latitude
          in: formData
          type: string
          description: Latitude of the location of the event.
        - name: longitude
          in: formData
          type: string
          description: Longitude of the location of the event.
      responses:
        200:
          description: New event created
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

  /events/{event_id}:
    get:
      tags:
        - event 
      summary: Event Information
      description: Get the information of any given event.
      parameters:
        - name: event_id 
          in: path
          description: The ID of event that you want to get info on.
          required: true
          type: integer
      responses:
        200:
          description: Returns the Event details
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Event"
        404:
          description: Can't find event with given ID
          
    post:
      tags:
        - event 
      summary: Edit a given event
      description: Update the event with the specified ID
      parameters:
        - name: event_id 
          in: path
          description: The ID of event that you want to get info on.
          required: true
          type: integer
        - name: name
          in: formData
          type: string
          required: true
          description: Name of the event
        - name: description
          in: formData
          type: string
          description: Description of the event
        - name: starts_on
          in: formData
          type: string
          format: "date-time"
          required: true
          description: The date when the event will happen
        - name: place
          in: formData
          type: string
          description: The place where the event will happen
        - name: city_id
          in: formData
          required: true
          type: integer
          description: The ID of the city where the city is happening.
        - name: event_type_id
          in: formData
          required: true
          type: integer
          description: The ID of the event type.
        - name: created_by_user_id
          in: formData
          type: integer
          required: true
          description: ID of the user who created the event 
        - name: latitude
          in: formData
          type: string
          description: Latitude of the location of the event.
        - name: longitude
          in: formData
          type: string
          description: Longitude of the location of the event.
      responses:
        200:
          description: Event Updated
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

    delete:
      tags:
        - delete
        - event
      summary: Cancel an event
      description: Soft deletes a given event(sets the status to '0') - means it was cancelled
      parameters:
        - name: event_id 
          in: path
          description: The ID of event that you want to delete.
          required: true
          type: integer
      responses:
        200:
          description: Event deleted
        404:
          description: Couldn't find the event with the given event ID.

  /events/{event_id}/users:
    get:
      tags:
        - event
      summary: Users connected to given event 
      description: This will give you all the users connected to this event - the invited, attended, rsvped - all together.
      parameters:
        - name: event_id
          in: path
          type: integer
          required: true
          description: ID of the event of which users shoud be returned.
        - name: present
          in: query
          type: string
          enum:
            - 1
            - 0
          description: If this parameter is given, call will only return users who were marked present at the event.
        - name: late
          in: query
          type: string
          enum:
            - 1
            - 0
          description: If this parameter is given, call will only return users who were marked late at the event. '1' will give all people who came but were late.
        - name: rsvp
          in: query
          type: string
          enum:
            - no_data
            - going
            - maybe
            - cant_go
          description: Returns all the users who have RSVPed as given value.
      responses:
        200:
          description: Returns all the users connected to the event.
          schema:
            type: "object"
            items:
              $ref: "#/definitions/UserEvent"
        404:
          description: Can't find any event with the given ID

    post:
      tags:
        - event
      summary: Invite users to the given event
      description: Give a list of all the users who should be invited to the given event.
      parameters:
        - name: event_id
          in: path
          type: integer
          required: true
          description: ID of the event to which users should be invited to.
        - name: invite_user_ids
          in: formData
          type: string
          description: Comma seperated IDs of all the users that is invited to the given event.
      responses:
        200:
          description: All the given users have been invited to the event.
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

  /events/{event_id}/users/{user_id}:
    get:
      tags:
        - event
      summary: Info of users connection with event 
      description: Returns the info of any given user who is associated with a given event.
      parameters:
        - name: event_id
          in: path
          type: integer
          required: true
          description: ID of the event
        - name: user_id
          in: path
          type: integer
          required: true
          description: User ID who is associated to the event.
      responses:
        200:
          description: Given users have been invited 
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

    post:
      tags:
        - event
      summary: Update present, late, rsvp choice of user 
      description: Set the present, late, rsvp fields for the given user and event.
      parameters:
        - name: event_id
          in: path
          type: integer
          required: true
          description: ID of the event
        - name: user_id
          in: path
          type: integer
          required: true
          description: User ID who is associated to the event.
        - name: present
          in: formData
          type: string
          enum:
            - 0
            - 1
          description: Update whether the user was present or not for the given event.
        - name: late
          in: formData
          type: string
          enum:
            - 0
            - 1
          description: Update whether the user was late or not for the given event.
        - name: rsvp
          type: string
          enum:
            - no_data
            - going
            - maybe
            - cant_go
          in: formData
          description: Update the RSVP field when the user indicates a choice of going to the given event.
      responses:
        200:
          description: Updated the given field for the given user in the given event.
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

    delete:
      tags:
        - event 
      summary: Uninvite a user from Event
      description: Remove the invitation of any given user from the given event.
      parameters:
        - name: event_id
          in: path
          type: integer
          required: true
          description: ID of the event
        - name: user_id
          in: path
          type: integer
          required: true
          description: User ID who is to be removed from the event
      responses:
        200:
          description: Given users have been un-invited 
        404:
          description: Can't find an event or user with the given ID 

  /events/{event_id}/attended:
    get:
      tags:
        - event
      summary: Users who attended the event
      description: Returns a list of all the users who attended the given event.
      parameters:
        - name: event_id
          in: path
          type: integer
          required: true
          description: ID of the event
      responses:
        200:
          description: List of all users who attended the event.
          schema:
            type: "object"
            items:
              $ref: "#/definitions/UserEvent"
        404:
          description: Can't find any event with the given ID


# Class

# GET /classes/{class_id}
# POST /classes/
# Class->save($class_info);

# GET /users/{user_id}/classes/last
# GET /users/{user_id}/classes
#         ? level_id
#           batch_id
#           class_on
# GET /classes/
#       ? level_id
#         batch_id
#         class_on
#         user_id
        
# GET /classes/{class_id}/students : Includes Attendance Data
# POST /classes/{class_id}/students : Mark attendance
# POST /classes/{class_id}/students/{student_id}/participation
# POST /classes/{class_id}/students/{student_id}/check_for_understanding


definitions:
  User:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      mad_email:
        type: string
      credit:
        type: integer
      city_id:
        type: integer
      city:
        type: string
      joined_on:
        type: string
        format: "date-time"
      left_on:
        type: string
        format: "date"
      reason_for_leaving:
        type: string
      user_type:
        type: string
        enum:
        - "volunteer"
        - "let_go"
        - "alumnai"
        - "applicant"
      address:
        type: string
      birthday:
        type: string
        format: "date"
      photo:
        type: string
      sex:
        type: string
        enum:
        - "m"
        - "f"
        - "o"
      status:
        type: string
        enum:
          - "1"
          - "0"
      groups:
        type: "array"
        items:
          $ref: "#/definitions/Group"
            
  Group:
   type: "object"
   properties:
     id: 
       type: integer
     name:
       type: string
     vertical_id:
       type: integer
        
  Student:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      birthday:
        type: string
        format: "date"
      added_on:
        type: string
        format: "date-time"
      center_id:
        type: integer
      sex:
        type: string
        enum:
        - "m"
        - "f"
        - "u"
  City:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      president_id:
        type: integer
      type:
        type: string
        enum:
          - "actual"
          - "virtual"
  Batch:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      day:
        type: integer
      class_time:
        type: string
        format: "time"
      batch_head_id:
        type: integer
      center_id:
        type: integer
      status:
        type: string
        enum:
        - "1"
        - "0"
  Level:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      grade:
        type: integer
      center_id:
        type: integer
      status:
        type: string
        enum:
        - "1"
        - "0"
  Donation:
    type: "object"
    properties:
      id:
        type: integer
      type:
        type: string
        enum:
          - "cash"
          - 'cheque'
          - 'nach'
          - 'globalgiving'
          - 'giveindia'
          - 'online'
          - 'other'
      fundraiser_user_id:
        type: integer
      donor_id:
        type: integer
      with_user_id:
        type: integer
      status:
        type: string
        enum:
          - receipted
          - collected
          - deposited
      amount:
        type: integer
      cheque_no:
        type: string
      added_on:
        type: string
        format: "date-time"
      updated_on:
        type: string
        format: "date-time"
      updated_by_user_id:
        type: integer
      comment:
        type: string
      fundraiser:
        type: string
      donor:
        type: string
      deposit:
        type: "array"
        items:
          $ref: "#/definitions/Deposit"
  Deposit:
    type: "object"
    properties:
      id:
        type: integer
      collected_from_user_id:
        type: integer
      given_to_user_id:
        type: integer
      added_on:
        type: string
        format: "date-time"
      reviewed_on:
        type: string
        format: "date-time"
      amount:
        type: integer
      status:
        type: string
        enum:
          - approved
          - pending
          - rejected
      given_to_user_name:
        type: string
      collected_from_user_name:
        type: string
  Event:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      starts_on:
        type: string
        format: "date-time"
      place:
        type: string
      city_id:
        type: string
      event_type_id:
        type: integer
      event_type:
        type: string
      created_by_user_id:
        type: string
        format: "date-time"
      location:
        type: string      
      created_on:
        type: string
        format: "date-time"
  UserEvent:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      present:
        type: string
        enum:
          - 0
          - 1
      late:
        type: string
        enum:
          - 0
          - 1
      rsvp:
        type: string
        enum:
          - no_data
          - going
          - maybe
          - cant_go
      reason:
        type: string

