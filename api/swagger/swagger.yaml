swagger: "2.0"
info:
  version: "1.0"
  title: "MADApp API"
  description: "API endpoint documentation for MADApp."
host: localhost
basePath: /Projects/Phoenix/public
consumes:
  - application/json
produces:
  - application/json
  
paths:
  /users:
    get:
      description: Returns a list of all users matching given parameters
      parameters:
        - name: name
          in: query
          type: string
          description: Search by user name
        - name: phone
          in: query
          type: string
          description: Search by phone number
        - name: email
          in: query
          type: string
          description: Search users by given email
        - name: mad_email
          in: query
          type: string
          description: Search users by just the mad email
        - name: group_id
          in: query
          type: integer
          description: Return all users of the given group
        - name: group_in
          in: query
          type: string
          description: Returns all users in any of the given group. Can give an array - eg. group_in=3,5,9
        - name: city_id
          in: query
          type: integer
          required: false
          description: Return all users in the given city. If ommited the city of the user who's login is used to access the api is assumed.
        - name: user_type
          in: query
          type: string
          description: Can be 'volunteer', 'applicant', 'let_go' or 'alumnai'. 
        - name: center_id
          in: query
          type: integer
          required: false
          description: Returns all the teachers in the given city.
      responses:
        '200':
          description: Returns the list of users according to the given parameters.
          schema:
            type: "array"
            items: 
              $ref: "#/definitions/User"
        '404':
          description: Did not find any users matching the given parameters
    post:
      description: Create a new user with the data given in the body.
      parameters:
        - name: name
          in: formData
          type: string
          required: true
          description: Name of the user
        - name: phone
          in: formData
          type: string
          required: true
          description: Phone number
        - name: email
          in: formData
          type: string
          required: true
          description: Email
        - name: mad_email
          type: string
          in: formData
          description: "MAD Email - if they are a fellow or above, they'll have this."
        - name: joined_on
          type: string
          format: "date-time"
          in: formData
          description: The date they joined 
        - name: left_on
          type: string
          format: "date-time"
          in: formData
          description: The time when they left MAD.
        - name: city_id
          type: integer
          in: formData
          required: true
          description: ID of the city that user belongs to. Must be a valid city.
        - name: user_type
          in: formData
          type: string
          description: Can be 'volunteer', 'applicant', 'let_go' or 'alumnai'. 
      responses:
        200:
          description: User added successfully.
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.
          
  /users/{user_id}:
    get:
      description: Returns the user who's ID is given
      parameters:
        - name: user_id
          in: path
          description: The ID of the user to be found.
          required: true
          type: integer
      responses:
        200:
          description: Returns the user details
          schema:
            type: "object"
            items:
              $ref: "#/definitions/User"
        404:
          description: Can't find user with given ID
        400:
          description: Invalid ID format - did you put alphabets into the ID?
    post:
      description: Edit details of the given user
      parameters:
        - name: user_id
          in: path
          type: integer
          description: The ID of the user who has to be edited
          required: true
        - name: name
          in: formData
          type: string
          description: If you want to edit the name of the volunteer, provide the new name here.
        - name: email
          in: formData
          type: string
          description: If you want to change the email id associated with this account, use this field
        - name: phone
          in: formData
          type: string
          description: Phone number of the user.
        - name: mad_email
          in: formData
          type: string
          description: makeadiff.in email id. All users who are fellow or up will have this.
        - name: joined_on
          in: formData
          type: string
          format: "date-time"
          description: The date the user joined MAD
        - name: left_on
          in: formData
          type: string
          format: "date"
          description: The date user left MAD. Don't include this field if the user is still a volunteer
        - name: user_type
          in: formData
          type: string
          description: Can be any of these "volunteer", "let_go", "alumnai", "applicant"
        - name: address
          in: formData
          type: string
          description: Address of the user
        - name: sex
          in: formData
          type: string
          description: Sex of the user - can be "m", "f" or "o"
      responses:
        200:
          description: User edited with given data
        404:
          description: Can't find any user with the given {user_id}
          
    delete:
      description: Deletes the user with the given ID 
      parameters:
        - name: user_id
          in: path
          type: integer
          description: The id of the user to be deleted.
          required: true
      responses:
        200:
          description: User was deleted
        404:
          description: Couldn't find the user with the given {user_id}

  /users/{user_id}/credit:
    get:
      description: Returns the credit of the user with given ID
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
      responses:
        200:
          description: Returns the credit of the user
        404:
          description: Can't find any user with the id {user_id}
          
    post:
      description: Edit the credit of the user
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
        - name: credit
          type: number
          in: formData
          required: true
          description: New credit of the user
        - name: updated_by_user_id
          type: integer
          in: formData
          required: true
          description: ID of the user updating the credit
        - name: reason
          type: string
          in: formData
          required: true
          description: Reason for the credit update.
      responses:
        200:
          description: Credit edited.
        404:
          description: Can't find user with the id {user_id}
        400:
          description: Invalid data - required fields missing or in wrong format.
          
  /users/{user_id}/credit_history:
    get:
      description: Returns the entire history of credit changes for the given user.
      parameters:
        - name: user_id
          in: path
          description: ID of the user who's history we want
          required: true
          type: integer
      responses:
        200: 
          description: Ok
        404:
          description: No user fonud with that User ID.
 
  /users/{user_id}/class_history:
    get:
      description: Returns the entire class history of the given user.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user who's history we want
          type: integer
      responses:
        200: 
          description: Ok

  /users/login:
    get:
      tags:
        - user
        - auth
      summary: Logs user into the system
      parameters:
        - name: email
          in: query
          description: The email id for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: User Logged into the system.
        '400':
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - user
        - auth
      summary: Logs out current logged in user session
      parameters: []
      responses:
        default:
          description: User logged out.
  
  /cities:
    get:
      tags:
        - city
      summary: Gets list of all the cities in the system.
      parameters: []
      responses:
        200:
          description: Returns list of cities where MAD is operational in
          schema:
            type: "array"
            items:
              $ref: "#/definitions/City"
  
  /cities/{city_id}:
    get:
      summary: Returns the details of the city who's Id is given.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city to fetch
      responses:
        200:
          description: OK
          
  /cities/{city_id}/users:
    get:
      summary: Return all the users in the given city
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city
      responses:
        200:
          description: Returns the list of users
        404:
          description: Can't find any city with the given city ID
          
  /cities/{city_id}/teachers:
    get:
      summary: Return all the teachers in the given city
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city
      responses:
        200:
          description: Returns the list of teachers
        404:
          description: Can't find any city with the given city ID

  /cities/{city_id}/fellows:
    get:
      summary: Return all the fellows in the given city. This includes the City Team Leads and Shelter Ops Fellows as well.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city
      responses:
        200:
          description: Returns the list of fellows
        404:
          description: Can't find any city with the given city ID
          
  /cities/{city_id}/groups/{group_id}/users:
    get:
      summary: Return all the users in the given city and the given group. 
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city
        - name: group_id
          in: path
          required: true
          type: integer
          description: ID of the group
      responses:
        200:
          description: Returns the list of users.
        404:
          description: Can't find the city/group or users in that combination.
      
  
  
definitions:
  User:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      mad_email:
        type: string
      credit:
        type: integer
      joined_on:
        type: string
        format: "date-time"
      left_on:
        type: string
        format: "date-time"
      user_type:
        type: string
        enum:
        - "volunteer"
        - "let_go"
        - "alumnai"
        - "applicant"
      address:
        type: string
      sex:
        type: string
        enum:
        - "m"
        - "f"
        - "o"
  City:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      president_id:
        type: integer
      type:
        type: string
        enum:
          - "actual"
          - "virtual"
