swagger: "2.0"
info:
  version: "1.0"
  title: "MADApp API"
  description: "API endpoint documentation for MADApp. Responses will be follow JSend conventions - http://labs.omniti.com/labs/jsend."
host: localhost
basePath: /Projects/Phoenix/public
consumes:
  - application/json
produces:
  - application/json
  
paths:
  ############################### User
  /users:
    get:
      tags:
        - user
        - search
      description: Returns a list of all users matching given parameters
      parameters:
        - name: name
          in: query
          type: string
          description: Search by user name
        - name: phone
          in: query
          type: string
          description: Search by phone number
        - name: email
          in: query
          type: string
          description: Search users by given email
        - name: mad_email
          in: query
          type: string
          description: Search users by just the mad email
        - name: group_id
          in: query
          type: integer
          description: Return all users of the given group
        - name: group_in
          in: query
          type: string
          description: Returns all users in any of the given group. Can give an array - eg. group_in=3,5,9
        - name: city_id
          in: query
          type: integer
          required: false
          description: Return all users in the given city. If ommited the city of the user who's login is used to access the api is assumed.
        - name: user_type
          in: query
          type: string
          enum:
            - volunteer
            - applicant
            - let_go
            - alumnai
          description: Can be 'volunteer', 'applicant', 'let_go' or 'alumnai'. 
        - name: center_id
          in: query
          type: integer
          required: false
          description: Returns all the teachers in the given city.
      responses:
        '200':
          description: Returns the list of users according to the given parameters.
          schema:
            type: "array"
            items: 
              $ref: "#/definitions/User"
    post:
      tags:
        - user
        - create
      description: Create a new user with the data given in the body.
      parameters:
        - name: name
          in: formData
          type: string
          required: true
          description: Name of the user
        - name: phone
          in: formData
          type: string
          required: true
          description: Phone number
        - name: email
          in: formData
          type: string
          required: true
          description: Email
        - name: mad_email
          type: string
          in: formData
          description: "MAD Email - if they are a fellow or above, they'll have this."
        - name: password
          type: string
          in: formData
          description: "Password for the user. If registering on site, set this to 'pass'"
        - name: joined_on
          type: string
          format: "date-time"
          in: formData
          description: The date they joined 
        - name: city_id
          type: integer
          in: formData
          required: true
          description: ID of the city that user belongs to. Must be a valid city.
        - name: user_type
          in: formData
          type: string
          enum:
            - volunteer
            - applicant
            - let_go
            - alumnai
          description: Can be 'volunteer', 'applicant', 'let_go' or 'alumnai'. 
      responses:
        200:
          description: User added successfully.
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.
          
  /users/{user_id}:
    get:
      tags:
        - user
        - single
      description: Returns the user who's ID is given
      parameters:
        - name: user_id
          in: path
          description: The ID of the user to be found.
          required: true
          type: integer
      responses:
        200:
          description: Returns the user details
          schema:
            type: "object"
            items:
              $ref: "#/definitions/User"
        404:
          description: Can't find user with given ID
    post:
      tags:
        - user
        - edit
      description: Edit details of the given user
      parameters:
        # Another option of doing this.
        # - name: user
        #   in: body
        #   description: User details to update
        #   schema:
        #       $ref: "#/definitions/User"
        - name: user_id
          in: path
          type: integer
          description: The ID of the user who has to be edited
          required: true
        - name: name
          in: formData
          type: string
          description: If you want to edit the name of the volunteer, provide the new name here.
        - name: email
          in: formData
          type: string
          description: If you want to change the email id associated with this account, use this field
        - name: phone
          in: formData
          type: string
          description: Phone number of the user.
        - name: mad_email
          in: formData
          type: string
          description: makeadiff.in email id. All users who are fellow or up will have this.
        - name: joined_on
          in: formData
          type: string
          format: "date-time"
          description: The date the user joined MAD
        - name: left_on
          in: formData
          type: string
          format: "date"
          description: The date user left MAD. Don't include this field if the user is still a volunteer
        - name: user_type
          in: formData
          type: string
          description: Can be any of these "volunteer", "let_go", "alumnai", "applicant"
        - name: address
          in: formData
          type: string
          description: Address of the user
        - name: sex
          in: formData
          type: string
          description: Sex of the user - can be "m", "f" or "o"
      responses:
        200:
          description: User edited with given data
        404:
          description: Can't find any user with the given {user_id}
          
    delete:
      tags:
        - user
        - delete
      description: Deletes the user with the given ID 
      parameters:
        - name: user_id
          in: path
          type: integer
          description: The id of the user to be deleted.
          required: true
      responses:
        200:
          description: User was deleted
        404:
          description: Couldn't find the user with the given {user_id}

  /users/{user_id}/groups:
    get:
      tags:
        - user 
        - group
      description: Return all the groups of the given user ID.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
      responses:
        200: 
          description: Ok
        404:
          description: Can't find any user with the given ID.

  /users/{user_id}/groups/{group_id}:
    post:
      tags:
        - user 
        - group
      description: Add the user to the given Group.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
        - name: group_id
          type: integer
          in: path
          required: true
          description: ID of the Group
      responses:
        200:
          description: Ok
        404:
          description: Can't find any user or group with the given ID. 
    delete:
      tags:
        - user
        - group
      description: Remove the user to the given Group.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
        - name: group_id
          type: integer
          in: path
          required: true
          description: ID of the Group
      responses:
        200:
          description: Ok
        404:
          description: Can't find user or the group.

  /users/{user_id}/credit:
    get:
      tags:
        - user 
        - credit
      description: Returns the credit of the user with given ID
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
      responses:
        200:
          description: Returns the credit of the user
        404:
          description: Can't find any user with the id {user_id}
          
    post:
      tags:
        - user 
        - credit
      description: Edit the credit of the user
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
        - name: credit
          type: number
          in: formData
          required: true
          description: New credit of the user
        - name: updated_by_user_id
          type: integer
          in: formData
          required: true
          description: ID of the user updating the credit
        - name: reason
          type: string
          in: formData
          required: true
          description: Reason for the credit update.
      responses:
        200:
          description: Credit edited.
        404:
          description: Can't find user with the id {user_id}
        400:
          description: Invalid data - required fields missing or in wrong format.
          
  /users/{user_id}/credit_history:
    get:
      tags:
        - user 
        - credit
      description: Returns the entire history of credit changes for the given user.
      parameters:
        - name: user_id
          in: path
          description: ID of the user who's history we want
          required: true
          type: integer
      responses:
        200: 
          description: Ok
        404:
          description: No user fonud with that User ID.
 
  /users/{user_id}/class_history:
    get:
      tags:
        - user 
      description: Returns the entire class history of the given user.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user who's history we want
          type: integer
      responses:
        200: 
          description: Ok

  /users/login:
    get:
      tags:
        - user
        - auth
      summary: Logs user into the system
      parameters:
        - name: email
          in: query
          description: The email id for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: User Logged into the system.
        '400':
          description: Invalid username/password supplied
  #/users/logout:
  #  get:
  #    tags:
  #      - user
  #      - auth
  #    summary: Logs out current logged in user session
  #    parameters: []
  #    responses:
  #      default:
  #        description: User logged out.
  
  ########################################### Cities
  /cities:
    get:
      tags:
        - city
      summary: Gets list of all the cities in the system.
      parameters: []
      responses:
        200:
          description: Returns list of cities where MAD is operational in
          schema:
            type: "array"
            items:
              $ref: "#/definitions/City"
  
  /cities/{city_id}:
    get:
      tags:
        - city
        - single
      summary: Returns the details of the city who's Id is given.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city to fetch
      responses:
        200:
          description: OK
          
  /cities/{city_id}/users:
    get:
      tags:
        - user 
        - city
      summary: Return all the users in the given city
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city
      responses:
        200:
          description: Returns the list of users
        404:
          description: Can't find any city with the given city ID
          
  /cities/{city_id}/teachers:
    get:
      tags:
        - user 
        - city
        - teacher
      summary: Return all the teachers in the given city
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city
      responses:
        200:
          description: Returns the list of teachers
        404:
          description: Can't find any city with the given city ID

  /cities/{city_id}/fellows:
    get:
      tags:
        - user 
        - city
        - fellow
      summary: Return all the fellows in the given city. This includes the City Team Leads and Shelter Ops Fellows as well.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city
      responses:
        200:
          description: Returns the list of fellows
        404:
          description: Can't find any city with the given city ID
          
  /cities/{city_id}/centers:
    get:
      tags:
        - city
        - center
      summary: Returns the list of all centers in the given city.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: City ID
      responses:
        200:
          description: Returns all centers.
        404:
          description: Can't find city with given ID.

  /cities/{city_id}/students:
    get:
      tags:
        - city
        - student
      summary: Returns the list of all students in the given city.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: City ID
      responses:
        200:
          description: Returns all students.
        404:
          description: Can't find city with given ID.

  ###################################### Group
  /groups/:
    get:
      tags:
        - group
      summary: Returns all the groups currently active.
      responses:
        200:
          description: Ok

  /groups/{group_id}:
    get:
      tags:
        - group
        - single
      summary: Returns the details of the group of the given ID
      parameters:
        - name: group_id
          in: path
          required: true
          type: integer
          description: Group ID
      responses:
        200:
          description: Ok
        404:
          description: Group not found.
  
  ###################################### Center
  /centers/:
    get:
      tags:
        - center
        - search
      description: Returns a list of all centers matching given parameters
      parameters:
        - name: name
          in: query
          type: string
          description: Search by Center name
        - name: city_id
          in: query
          type: integer
          required: false
          description: Return all centers in the given city.
      responses:
        200:
          description: Ok
    # post:
    #   description: Create a new center.
    #   parameters:
    #     - name: name
    #       in: query
    #       type: string
    #       required: true
    #       description: Search by Center name
    #     - name: city_id
    #       in: query
    #       type: integer
    #       required: true
    #       description: Return all centers in the given city.
    #     - center_head_id
    #       in: query
    #       type: integer
    #       required: true
    #       description: The Shelter Operations Fellow's user ID. 
    #   responses:
    #     200:
    #       description: Ok

  /centers/{center_id}:
    get:
      tags:
        - center
      description: Returns the details of the center who's ID is given
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID
    # post:
    #   description: Edit the given center.
    #   parameters:
    #     - name: name
    #       in: query
    #       type: string
    #       required: true
    #       description: Search by Center name
    #     - name: city_id
    #       in: query
    #       type: integer
    #       required: true
    #       description: Return all centers in the given city.
    #     - center_head_id
    #       in: query
    #       type: integer
    #       required: true
    #       description: The Shelter Operations Fellow's user ID. 
    #   responses:
    #     200:
    #       description: Ok
    #     404:
    #        description: Can't find any centers with the given ID
    # delete:
    #   description: Deletes the given center.
    #   responses:
    #     200:
    #       description: Ok
    #     404:
    #        description: Can't find any centers with the given ID
  
  /centers/{center_id}/teachers:
    get:
      tags:
        - user
        - teacher 
        - center
      description: Returns the teachers assigned to the given center.
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID

  /centers/{center_id}/students:
    get:
      tags:
        - student 
        - center
      description: Returns the students in the given center.
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID

  /centers/{center_id}/levels:
    get:
      tags:
        - level 
        - center
      description: Returns the levels/class sections. in the given center.
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID

  /centers/{center_id}/batchs:
    get:
      tags:
        - batch
        - center
      description: Returns the batchs in the given center.
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID

  ###################################### Students
  
  /students:
    get:
      tags:
        - student
        - search
      description: Returns a list of all students matching given parameters
      parameters:
        - name: name
          in: query
          type: string
          description: Search by name
        - name: city_id
          in: query
          type: integer
          required: false
          description: Return all students in the given city. If ommited the city of the user who's login is used to access the api is assumed.
        - name: center_id
          in: query
          type: integer
          required: false
          description: Returns all the students in the given center.
        - name: sex
          in: query
          type: string
          enum: [m,f]
          required: false
          description: Returns all the students who are of the given gender. Can be 'm' or 'f'.
      responses:
        '200':
          description: Returns the list of students according to the given parameters.
          schema:
            type: "array"
            items: 
              $ref: "#/definitions/Student"
        '404':
          description: Did not find any students matching the given parameters
    post:
      tags:
        - student
      description: Create a new student with the data given in the body.
      parameters:
        - name: name
          in: formData
          type: string
          required: true
          description: Name of the Student
        - name: sex
          in: formData
          type: string
          enum: [m,f]
          description: Sex of the student - 'm' or 'f'.
        - name: center_id
          type: integer
          in: formData
          required: true
          description: ID of the Center that student belongs to. Must be a valid center.
      responses:
        200:
          description: Student added successfully.
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

  /students/{student_id}:
    get:
      tags:
        - student
      description: Returns the student who's ID is given
      parameters:
        - name: student_id
          in: path
          description: The ID of the student to be found.
          required: true
          type: integer
      responses:
        200:
          description: Returns the student details
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Student"
        404:
          description: Can't find student with given ID
        400:
          description: Invalid ID format - did you put alphabets into the ID?
    post:
      tags:
        - student
      description: Edit details of the given student
      parameters:
        - name: student_id
          in: path
          type: integer
          description: The ID of the student who has to be edited
          required: true
        - name: name
          in: formData
          type: string
          description: If you want to edit the name of the volunteer, provide the new name here.
        - name: sex
          in: formData
          type: string
          description: Sex of the student - can be "m", "f" or "u"
      responses:
        200:
          description: User edited with given data
        404:
          description: Can't find any student with the given {student_id}
          
    delete:
      tags:
        - student
      description: Deletes the student with the given ID 
      parameters:
        - name: student_id
          in: path
          type: integer
          description: The id of the student to be deleted.
          required: true
      responses:
        200:
          description: Student was deleted
        404:
          description: Couldn't find the student with the given {student_id}

  ############################# Level
  /levels/{level_id}:
    get:
      tags:
        - level
      description: Returns the details of the level with the given ID
      parameters:
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level that should be found.
      responses:
        200:
          description: Details of the level will be returned.
        404:
          description: Can't find any level with the given {level_id}

  /levels/{level_id}/students:
    get:
      tags:
        - student
        - level
      description: Returs the students mapped to the given level.
      parameters:
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level
      responses:
        200:
          description: List of all the students in that level.
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Student"
        404:
          description: Can't find any level with the given {level_id}

  ######################## Batches
  /batches/{batch_id}:
    get:
      tags:
        - batch
      description: Returns the details of the batch with the given ID
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch that should be found.
      responses:
        200:
          description: Details of the batch will be returned.
        404:
          description: Can't find any batch with the given {batch_id}

  /batchs/{batch_id}/teachers:
    get:
      tags:
        - batch
        - teacher
        - user
      description: Returs the teachers mapped to the given batch.
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch
      responses:
        200:
          description: List of all the teachers in that batch.
          schema:
            type: "object"
            items:
              $ref: "#/definitions/User"
        404:
          description: Can't find any batch with the given {batch_id}

# Class

# GET /classes/{class_id}
# POST /classes/
# Class->save($class_info);

# GET /users/{user_id}/classes/last
# GET /users/{user_id}/classes
#         ? level_id
#           batch_id
#           class_on
# GET /classes/
#       ? level_id
#         batch_id
#         class_on
#         user_id
        
# GET /classes/{class_id}/students : Includes Attendance Data
# POST /classes/{class_id}/students : Mark attendance
# POST /classes/{class_id}/students/{student_id}/participation
# POST /classes/{class_id}/students/{student_id}/check_for_understanding


definitions:
  User:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      mad_email:
        type: string
      credit:
        type: integer
      city_id:
        type: integer
      city:
        type: string
      joined_on:
        type: string
        format: "date-time"
      left_on:
        type: string
        format: "date"
      reason_for_leaving:
        type: string
      user_type:
        type: string
        enum:
        - "volunteer"
        - "let_go"
        - "alumnai"
        - "applicant"
      address:
        type: string
      birthday:
        type: string
        format: "date"
      photo:
        type: string
      sex:
        type: string
        enum:
        - "m"
        - "f"
        - "o"
      status:
        type: string
        enum:
          - "1"
          - "0"
      # groups:
      #   schema:
      #     type: "object"
      #     items:
      #       $ref: "#/definitions/Group"
            
  Group:
    type: "object"
    properties:
      id: 
        type: integer
      name:
        type: string
      vertical_id:
        type: integer
        
  Student:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      birthday:
        type: string
        format: "date"
      added_on:
        type: string
        format: "date-time"
      center_id:
        type: integer
      sex:
        type: string
        enum:
        - "m"
        - "f"
        - "u"
  City:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      president_id:
        type: integer
      type:
        type: string
        enum:
          - "actual"
          - "virtual"
